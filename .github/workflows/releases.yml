---
name: Release

# Do this on every tagged commit
on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: -C target-cpu=native
  MWA_BEAM_FILE: /mwa_full_embedded_element_pattern.h5

jobs:
  build-linux-release:
    name: Build release for Linux
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
            tzdata \
            build-essential \
            pkg-config \
            cmake \
            curl \
            git \
            lcov \
            libhdf5-dev \
            libfreetype-dev \
            libexpat1-dev \
            libfontconfig-dev \
            ;
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Install cfitsio 3.49
        run: |
          curl "https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-3.49.tar.gz" -o cfitsio.tar.gz
          tar -xf cfitsio.tar.gz
          rm cfitsio.tar.gz
          cd cfitsio-3.49
          # Enabling SSE2/SSSE3 could cause portability problems, but it's unlikely that anyone
          # is using such a CPU...
          # https://stackoverflow.com/questions/52858556/most-recent-processor-without-support-of-ssse3-instructions
          # Disabling curl just means you cannot fits_open() using a URL.
          CFLAGS="-O3" ./configure --prefix=/usr/local --enable-reentrant --enable-sse2 --enable-ssse3 --disable-curl

          if [[ "$OSTYPE" == "linux-gnu"* ]]; then
              make -j
              sudo make install
              sudo ldconfig

          elif [[ "$OSTYPE" == "darwin"* ]]; then
              sudo make shared
              sudo make install
          fi

          cd ..

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.19
        with:
          cuda: '12.4.1'

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build and Tar
        run: |
          curl https://raw.githubusercontent.com/HDFGroup/hdf5/develop/COPYING -o COPYING-hdf5
          curl https://raw.githubusercontent.com/liberfa/erfa/master/LICENSE -o LICENSE-erfa
          curl https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/License.txt -o LICENSE-cfitsio
          cp .github/workflows/releases-readme.md README.md

          # Build with our recently-built static cfitsio
          export CFITSIO_STATIC=1
          # Don't build against the host CPU
          [ -f .cargo/config.toml ] && rm .cargo/config.toml
          # Don't make it look like the git tree is dirty because we aren't
          # building against the host CPU
          perl -0777 -pe 's/let dirty = .*\n.*\n.*\n.*/let dirty = "";/' src/cli/mod.rs

          for ARCH in {2,3}; do
            echo "Building x86-64-v${ARCH}"
            export CFLAGS="-march=x86-64-v${ARCH}"
            export CXXFLAGS="-march=x86-64-v${ARCH}"
            export RUSTFLAGS="-C target-cpu=x86-64-v${ARCH}"

            # Use --no-default-features to disable plotting; it's too hard to make this portable.
            cargo build --profile production --locked --no-default-features --features=hdf5-static
            mv target/production/hyperdrive .
            tar -acvf mwa_hyperdrive-$(git describe --tags)-Linux-x86-64-v${ARCH}.tar.gz \
            LICENSE COPYING-hdf5 LICENSE-erfa LICENSE-cfitsio README.md \
            hyperdrive

            cargo build --profile production --locked --no-default-features --features=hdf5-static,cuda
            mv target/production/hyperdrive .
            tar -acvf mwa_hyperdrive-$(git describe --tags)-Linux-x86-64-v${ARCH}-CUDA-double.tar.gz \
            LICENSE COPYING-hdf5 LICENSE-erfa LICENSE-cfitsio LICENSE-NVIDIA README.md \
            hyperdrive

            cargo build --profile production --locked --no-default-features --features=hdf5-static,cuda,gpu-single
            mv target/production/hyperdrive .
            tar -acvf mwa_hyperdrive-$(git describe --tags)-Linux-x86-64-v${ARCH}-CUDA-single.tar.gz \
            LICENSE COPYING-hdf5 LICENSE-erfa LICENSE-cfitsio LICENSE-NVIDIA README.md \
            hyperdrive

            cargo clean
          done

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: linux.tar.gz
          path: "*.tar.gz"
          if-no-files-found: error

  create-github-release:
    name: Create a new release
    runs-on: ubuntu-latest
    needs: build-linux-release
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux.tar.gz

      - name: Provide new release asset
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            *.tar.gz

  rust_release:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [create-github-release]
    environment: CI
    steps:
        - name: Checkout sources
          uses: actions/checkout@v4

        - name: Install stable, minimal toolchain
          uses: dtolnay/rust-toolchain@v1
          with:
            toolchain: stable

        - name: Install dependencies
          run: |
            sudo apt update -y
            sudo apt install -y \
              tzdata \
              build-essential \
              pkg-config \
              cmake \
              curl \
              git \
              lcov \
              libhdf5-dev \
              libfreetype-dev \
              libexpat1-dev \
              libfontconfig-dev \
              ;
          env:
            DEBIAN_FRONTEND: noninteractive

        # We install cfitsio because when releasing to crates.io, it runs
        # the rust docs generation which fails if our code does any
        # writing. With feature cfitsio-static, it has to build cfitsio which
        # involves writing so have to build without that feature when pushing
        # to crates.io
        - name: Install cfitsio 3.49
          run: |
            curl "https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-3.49.tar.gz" -o cfitsio.tar.gz
            tar -xf cfitsio.tar.gz
            rm cfitsio.tar.gz
            cd cfitsio-3.49
            # Enabling SSE2/SSSE3 could cause portability problems, but it's unlikely that anyone
            # is using such a CPU...
            # https://stackoverflow.com/questions/52858556/most-recent-processor-without-support-of-ssse3-instructions
            # Disabling curl just means you cannot fits_open() using a URL.
            CFLAGS="-O3" ./configure --prefix=/usr/local --enable-reentrant --enable-sse2 --enable-ssse3 --disable-curl

            make -j
            sudo make install
            sudo ldconfig

            cd ..
            rm -rf cfitsio-3.49

        - name: Get the beam HDF5 file
          run: sudo curl http://ws.mwatelescope.org/static/mwa_full_embedded_element_pattern.h5 -o $MWA_BEAM_FILE

        - name: Build on latest stable rust
          run: cargo build --release

        - name: Run tests on latest stable rust
          run: cargo test --release

        - uses: katyo/publish-crates@v2
          with:
              registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
              args: --no-verify