/* automatically generated by rust-bindgen 0.60.1 */

#[doc = " Common things needed to perform modelling. All pointers are to device"]
#[doc = " memory."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Addresses {
    pub num_freqs: ::std::os::raw::c_int,
    pub num_vis: ::std::os::raw::c_int,
    pub num_tiles: ::std::os::raw::c_int,
    pub sbf_l: ::std::os::raw::c_int,
    pub sbf_n: ::std::os::raw::c_int,
    pub sbf_c: f64,
    pub sbf_dx: f64,
    pub d_freqs: *const f64,
    pub d_shapelet_basis_values: *const f64,
    pub num_unique_beam_freqs: ::std::os::raw::c_int,
    pub d_tile_map: *const ::std::os::raw::c_int,
    pub d_freq_map: *const ::std::os::raw::c_int,
    pub d_tile_index_to_unflagged_tile_index_map: *const ::std::os::raw::c_int,
    pub d_vis: *mut JonesF32,
}
#[test]
fn bindgen_test_layout_Addresses() {
    assert_eq!(
        ::std::mem::size_of::<Addresses>(),
        96usize,
        concat!("Size of: ", stringify!(Addresses))
    );
    assert_eq!(
        ::std::mem::align_of::<Addresses>(),
        8usize,
        concat!("Alignment of ", stringify!(Addresses))
    );
    fn test_field_num_freqs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_freqs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(num_freqs)
            )
        );
    }
    test_field_num_freqs();
    fn test_field_num_vis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_vis) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(num_vis)
            )
        );
    }
    test_field_num_vis();
    fn test_field_num_tiles() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_tiles) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(num_tiles)
            )
        );
    }
    test_field_num_tiles();
    fn test_field_sbf_l() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sbf_l) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(sbf_l)
            )
        );
    }
    test_field_sbf_l();
    fn test_field_sbf_n() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sbf_n) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(sbf_n)
            )
        );
    }
    test_field_sbf_n();
    fn test_field_sbf_c() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sbf_c) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(sbf_c)
            )
        );
    }
    test_field_sbf_c();
    fn test_field_sbf_dx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sbf_dx) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(sbf_dx)
            )
        );
    }
    test_field_sbf_dx();
    fn test_field_d_freqs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d_freqs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(d_freqs)
            )
        );
    }
    test_field_d_freqs();
    fn test_field_d_shapelet_basis_values() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d_shapelet_basis_values) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(d_shapelet_basis_values)
            )
        );
    }
    test_field_d_shapelet_basis_values();
    fn test_field_num_unique_beam_freqs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_unique_beam_freqs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(num_unique_beam_freqs)
            )
        );
    }
    test_field_num_unique_beam_freqs();
    fn test_field_d_tile_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d_tile_map) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(d_tile_map)
            )
        );
    }
    test_field_d_tile_map();
    fn test_field_d_freq_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d_freq_map) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(d_freq_map)
            )
        );
    }
    test_field_d_freq_map();
    fn test_field_d_tile_index_to_unflagged_tile_index_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d_tile_index_to_unflagged_tile_index_map) as usize
                    - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(d_tile_index_to_unflagged_tile_index_map)
            )
        );
    }
    test_field_d_tile_index_to_unflagged_tile_index_map();
    fn test_field_d_vis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Addresses>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).d_vis) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Addresses),
                "::",
                stringify!(d_vis)
            )
        );
    }
    test_field_d_vis();
}
