/* automatically generated by rust-bindgen 0.68.1 */

pub const SBF_C: f32 = 5000.0;
pub const SBF_L: ::std::os::raw::c_int = 10001;
pub const SBF_N: ::std::os::raw::c_int = 101;
pub const SBF_DX: f32 = 0.009999999776482582;
#[doc = " (right ascension, declination) coordinates. Each is in units of radians."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct RADec {
    pub ra: f32,
    pub dec: f32,
}
#[test]
fn bindgen_test_layout_RADec() {
    const UNINIT: ::std::mem::MaybeUninit<RADec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RADec>(),
        8usize,
        concat!("Size of: ", stringify!(RADec))
    );
    assert_eq!(
        ::std::mem::align_of::<RADec>(),
        4usize,
        concat!("Alignment of ", stringify!(RADec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ra) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RADec), "::", stringify!(ra))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RADec),
            "::",
            stringify!(dec)
        )
    );
}
#[doc = " The (x,y,z) coordinates of an antenna/tile/station. They are in units of\n metres."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct XYZ {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_XYZ() {
    const UNINIT: ::std::mem::MaybeUninit<XYZ> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XYZ>(),
        12usize,
        concat!("Size of: ", stringify!(XYZ))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZ>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZ))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XYZ), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XYZ), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(XYZ), "::", stringify!(z))
    );
}
#[doc = " The (u,v,w) coordinates of a baseline. They are in units of metres."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct UVW {
    #[doc = " u coordinate [metres]"]
    pub u: f32,
    #[doc = " v coordinate [metres]"]
    pub v: f32,
    #[doc = " w coordinate [metres]"]
    pub w: f32,
}
#[test]
fn bindgen_test_layout_UVW() {
    const UNINIT: ::std::mem::MaybeUninit<UVW> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UVW>(),
        12usize,
        concat!("Size of: ", stringify!(UVW))
    );
    assert_eq!(
        ::std::mem::align_of::<UVW>(),
        4usize,
        concat!("Alignment of ", stringify!(UVW))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(UVW), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(UVW), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(UVW), "::", stringify!(w))
    );
}
#[doc = " The LMN coordinates of a sky-model component (prepared for application in the\nRIME)."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct LmnRime {
    #[doc = " l coordinate [dimensionless]"]
    pub l: f32,
    #[doc = " m coordinate [dimensionless]"]
    pub m: f32,
    #[doc = " n coordinate [dimensionless]"]
    pub n: f32,
}
#[test]
fn bindgen_test_layout_LmnRime() {
    const UNINIT: ::std::mem::MaybeUninit<LmnRime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LmnRime>(),
        12usize,
        concat!("Size of: ", stringify!(LmnRime))
    );
    assert_eq!(
        ::std::mem::align_of::<LmnRime>(),
        4usize,
        concat!("Alignment of ", stringify!(LmnRime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LmnRime),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LmnRime),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LmnRime),
            "::",
            stringify!(n)
        )
    );
}
#[doc = " Parameters describing a Gaussian (also applicable to shapelets)."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct GaussianParams {
    #[doc = " Major axis size [radians]"]
    pub maj: f32,
    #[doc = " Minor axis size [radians]"]
    pub min: f32,
    #[doc = " Position angle [radians]"]
    pub pa: f32,
}
#[test]
fn bindgen_test_layout_GaussianParams() {
    const UNINIT: ::std::mem::MaybeUninit<GaussianParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GaussianParams>(),
        12usize,
        concat!("Size of: ", stringify!(GaussianParams))
    );
    assert_eq!(
        ::std::mem::align_of::<GaussianParams>(),
        4usize,
        concat!("Alignment of ", stringify!(GaussianParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maj) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GaussianParams),
            "::",
            stringify!(maj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GaussianParams),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pa) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GaussianParams),
            "::",
            stringify!(pa)
        )
    );
}
#[doc = " Parameters describing a shapelet coefficient."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ShapeletCoeff {
    pub value: f32,
    pub n1: ::std::os::raw::c_uchar,
    pub n2: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ShapeletCoeff() {
    const UNINIT: ::std::mem::MaybeUninit<ShapeletCoeff> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ShapeletCoeff>(),
        8usize,
        concat!("Size of: ", stringify!(ShapeletCoeff))
    );
    assert_eq!(
        ::std::mem::align_of::<ShapeletCoeff>(),
        4usize,
        concat!("Alignment of ", stringify!(ShapeletCoeff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ShapeletCoeff),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ShapeletCoeff),
            "::",
            stringify!(n1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ShapeletCoeff),
            "::",
            stringify!(n2)
        )
    );
}
#[doc = " (u,v) coordinates for a shapelet. W isn't used, so we're a bit more efficient\n by not using UVW."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct ShapeletUV {
    #[doc = " u coordinate [metres]"]
    pub u: f32,
    #[doc = " v coordinate [metres]"]
    pub v: f32,
}
#[test]
fn bindgen_test_layout_ShapeletUV() {
    const UNINIT: ::std::mem::MaybeUninit<ShapeletUV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ShapeletUV>(),
        8usize,
        concat!("Size of: ", stringify!(ShapeletUV))
    );
    assert_eq!(
        ::std::mem::align_of::<ShapeletUV>(),
        4usize,
        concat!("Alignment of ", stringify!(ShapeletUV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ShapeletUV),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ShapeletUV),
            "::",
            stringify!(v)
        )
    );
}
#[doc = " A Jones matrix, single precision. The floats are unpacked into real and imag\n components because complex numbers don't traverse the FFI boundary well."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct JonesF32 {
    #[doc = " Real part of the (0,0) component"]
    pub j00_re: f32,
    #[doc = " Imaginary part of the (0,0) component"]
    pub j00_im: f32,
    #[doc = " Real part of the (0,1) component"]
    pub j01_re: f32,
    #[doc = " Imaginary part of the (0,1) component"]
    pub j01_im: f32,
    #[doc = " Real part of the (1,0) component"]
    pub j10_re: f32,
    #[doc = " Imaginary part of the (1, 0) component"]
    pub j10_im: f32,
    #[doc = " Real part of the (1,1) component"]
    pub j11_re: f32,
    #[doc = " Imaginary part of the (1,1) component"]
    pub j11_im: f32,
}
#[test]
fn bindgen_test_layout_JonesF32() {
    const UNINIT: ::std::mem::MaybeUninit<JonesF32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JonesF32>(),
        32usize,
        concat!("Size of: ", stringify!(JonesF32))
    );
    assert_eq!(
        ::std::mem::align_of::<JonesF32>(),
        4usize,
        concat!("Alignment of ", stringify!(JonesF32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j00_re) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j00_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j00_im) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j00_im)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j01_re) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j01_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j01_im) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j01_im)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j10_re) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j10_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j10_im) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j10_im)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j11_re) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j11_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j11_im) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF32),
            "::",
            stringify!(j11_im)
        )
    );
}
#[doc = " A Jones matrix, double precision. The floats are unpacked into real and imag\n components because complex numbers don't traverse the FFI boundary well."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct JonesF64 {
    #[doc = " Real part of the (0,0) component"]
    pub j00_re: f64,
    #[doc = " Imaginary part of the (0,0) component"]
    pub j00_im: f64,
    #[doc = " Real part of the (0,1) component"]
    pub j01_re: f64,
    #[doc = " Imaginary part of the (0,1) component"]
    pub j01_im: f64,
    #[doc = " Real part of the (1,0) component"]
    pub j10_re: f64,
    #[doc = " Imaginary part of the (1, 0) component"]
    pub j10_im: f64,
    #[doc = " Real part of the (1,1) component"]
    pub j11_re: f64,
    #[doc = " Imaginary part of the (1,1) component"]
    pub j11_im: f64,
}
#[test]
fn bindgen_test_layout_JonesF64() {
    const UNINIT: ::std::mem::MaybeUninit<JonesF64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JonesF64>(),
        64usize,
        concat!("Size of: ", stringify!(JonesF64))
    );
    assert_eq!(
        ::std::mem::align_of::<JonesF64>(),
        8usize,
        concat!("Alignment of ", stringify!(JonesF64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j00_re) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j00_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j00_im) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j00_im)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j01_re) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j01_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j01_im) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j01_im)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j10_re) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j10_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j10_im) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j10_im)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j11_re) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j11_re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j11_im) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(JonesF64),
            "::",
            stringify!(j11_im)
        )
    );
}
#[doc = " Common things needed to perform modelling. All pointers are to device\n memory."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Addresses {
    pub num_freqs: ::std::os::raw::c_int,
    pub num_vis: ::std::os::raw::c_int,
    pub num_baselines: ::std::os::raw::c_int,
    pub d_freqs: *const f32,
    pub d_shapelet_basis_values: *const f32,
    pub num_unique_beam_freqs: ::std::os::raw::c_int,
    pub d_tile_map: *const ::std::os::raw::c_int,
    pub d_freq_map: *const ::std::os::raw::c_int,
    pub d_tile_index_to_unflagged_tile_index_map: *const ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Addresses() {
    const UNINIT: ::std::mem::MaybeUninit<Addresses> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Addresses>(),
        64usize,
        concat!("Size of: ", stringify!(Addresses))
    );
    assert_eq!(
        ::std::mem::align_of::<Addresses>(),
        8usize,
        concat!("Alignment of ", stringify!(Addresses))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_freqs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(num_freqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_vis) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(num_vis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_baselines) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(num_baselines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_freqs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(d_freqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_shapelet_basis_values) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(d_shapelet_basis_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_unique_beam_freqs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(num_unique_beam_freqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_tile_map) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(d_tile_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_freq_map) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(d_freq_map)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).d_tile_index_to_unflagged_tile_index_map) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Addresses),
            "::",
            stringify!(d_tile_index_to_unflagged_tile_index_map)
        )
    );
}
impl Default for Addresses {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " All the parameters needed to describe point-source components."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Points {
    pub num_power_laws: ::std::os::raw::c_int,
    pub power_law_lmns: *const LmnRime,
    #[doc = " Instrumental flux densities calculated at 150 MHz."]
    pub power_law_fds: *const JonesF32,
    #[doc = " Spectral indices."]
    pub power_law_sis: *const f32,
    pub num_curved_power_laws: ::std::os::raw::c_int,
    pub curved_power_law_lmns: *const LmnRime,
    #[doc = " Instrumental flux densities calculated at 150 MHz."]
    pub curved_power_law_fds: *const JonesF32,
    #[doc = " Spectral indices."]
    pub curved_power_law_sis: *const f32,
    #[doc = " Spectral curvatures."]
    pub curved_power_law_qs: *const f32,
    pub num_lists: ::std::os::raw::c_int,
    pub list_lmns: *const LmnRime,
    #[doc = " Instrumental (i.e. XX, XY, YX, XX)."]
    pub list_fds: *const JonesF32,
}
#[test]
fn bindgen_test_layout_Points() {
    const UNINIT: ::std::mem::MaybeUninit<Points> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Points>(),
        96usize,
        concat!("Size of: ", stringify!(Points))
    );
    assert_eq!(
        ::std::mem::align_of::<Points>(),
        8usize,
        concat!("Alignment of ", stringify!(Points))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_power_laws) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(num_power_laws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_lmns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(power_law_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_fds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(power_law_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_sis) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(power_law_sis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_curved_power_laws) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(num_curved_power_laws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_lmns) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(curved_power_law_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_fds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(curved_power_law_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_sis) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(curved_power_law_sis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_qs) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(curved_power_law_qs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lists) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(num_lists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_lmns) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(list_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_fds) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Points),
            "::",
            stringify!(list_fds)
        )
    );
}
impl Default for Points {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " All the parameters needed to describe Gaussian components."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Gaussians {
    pub num_power_laws: ::std::os::raw::c_int,
    pub power_law_lmns: *const LmnRime,
    #[doc = " Instrumental flux densities calculated at 150 MHz."]
    pub power_law_fds: *const JonesF32,
    #[doc = " Spectral indices."]
    pub power_law_sis: *const f32,
    pub power_law_gps: *const GaussianParams,
    pub num_curved_power_laws: ::std::os::raw::c_int,
    pub curved_power_law_lmns: *const LmnRime,
    #[doc = " Instrumental flux densities calculated at 150 MHz."]
    pub curved_power_law_fds: *const JonesF32,
    #[doc = " Spectral indices."]
    pub curved_power_law_sis: *const f32,
    #[doc = " Spectral curvatures."]
    pub curved_power_law_qs: *const f32,
    pub curved_power_law_gps: *const GaussianParams,
    pub num_lists: ::std::os::raw::c_int,
    pub list_lmns: *const LmnRime,
    #[doc = " Instrumental (i.e. XX, XY, YX, XX)."]
    pub list_fds: *const JonesF32,
    pub list_gps: *const GaussianParams,
}
#[test]
fn bindgen_test_layout_Gaussians() {
    const UNINIT: ::std::mem::MaybeUninit<Gaussians> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Gaussians>(),
        120usize,
        concat!("Size of: ", stringify!(Gaussians))
    );
    assert_eq!(
        ::std::mem::align_of::<Gaussians>(),
        8usize,
        concat!("Alignment of ", stringify!(Gaussians))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_power_laws) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(num_power_laws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_lmns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(power_law_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_fds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(power_law_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_sis) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(power_law_sis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_gps) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(power_law_gps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_curved_power_laws) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(num_curved_power_laws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_lmns) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(curved_power_law_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_fds) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(curved_power_law_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_sis) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(curved_power_law_sis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_qs) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(curved_power_law_qs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_gps) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(curved_power_law_gps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lists) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(num_lists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_lmns) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(list_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_fds) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(list_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_gps) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Gaussians),
            "::",
            stringify!(list_gps)
        )
    );
}
impl Default for Gaussians {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " All the parameters needed to describe Shapelet components."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Shapelets {
    pub num_power_laws: ::std::os::raw::c_int,
    pub power_law_lmns: *const LmnRime,
    #[doc = " Instrumental flux densities calculated at 150 MHz."]
    pub power_law_fds: *const JonesF32,
    #[doc = " Spectral indices."]
    pub power_law_sis: *const f32,
    pub power_law_gps: *const GaussianParams,
    pub power_law_shapelet_uvs: *const ShapeletUV,
    pub power_law_shapelet_coeffs: *const ShapeletCoeff,
    pub power_law_num_shapelet_coeffs: *const ::std::os::raw::c_int,
    pub num_curved_power_laws: ::std::os::raw::c_int,
    pub curved_power_law_lmns: *const LmnRime,
    #[doc = " Instrumental flux densities calculated at 150 MHz."]
    pub curved_power_law_fds: *const JonesF32,
    #[doc = " Spectral indices."]
    pub curved_power_law_sis: *const f32,
    #[doc = " Spectral curvatures."]
    pub curved_power_law_qs: *const f32,
    pub curved_power_law_gps: *const GaussianParams,
    pub curved_power_law_shapelet_uvs: *const ShapeletUV,
    pub curved_power_law_shapelet_coeffs: *const ShapeletCoeff,
    pub curved_power_law_num_shapelet_coeffs: *const ::std::os::raw::c_int,
    pub num_lists: ::std::os::raw::c_int,
    pub list_lmns: *const LmnRime,
    #[doc = " Instrumental (i.e. XX, XY, YX, XX)."]
    pub list_fds: *const JonesF32,
    pub list_gps: *const GaussianParams,
    pub list_shapelet_uvs: *const ShapeletUV,
    pub list_shapelet_coeffs: *const ShapeletCoeff,
    pub list_num_shapelet_coeffs: *const ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Shapelets() {
    const UNINIT: ::std::mem::MaybeUninit<Shapelets> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Shapelets>(),
        192usize,
        concat!("Size of: ", stringify!(Shapelets))
    );
    assert_eq!(
        ::std::mem::align_of::<Shapelets>(),
        8usize,
        concat!("Alignment of ", stringify!(Shapelets))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_power_laws) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(num_power_laws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_lmns) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_fds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_sis) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_sis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_gps) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_gps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_shapelet_uvs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_shapelet_uvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).power_law_shapelet_coeffs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_shapelet_coeffs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).power_law_num_shapelet_coeffs) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(power_law_num_shapelet_coeffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_curved_power_laws) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(num_curved_power_laws)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_lmns) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_fds) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_sis) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_sis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_qs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_qs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curved_power_law_gps) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_gps)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).curved_power_law_shapelet_uvs) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_shapelet_uvs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).curved_power_law_shapelet_coeffs) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_shapelet_coeffs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).curved_power_law_num_shapelet_coeffs) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(curved_power_law_num_shapelet_coeffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_lists) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(num_lists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_lmns) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(list_lmns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_fds) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(list_fds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_gps) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(list_gps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_shapelet_uvs) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(list_shapelet_uvs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_shapelet_coeffs) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(list_shapelet_coeffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_num_shapelet_coeffs) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Shapelets),
            "::",
            stringify!(list_num_shapelet_coeffs)
        )
    );
}
impl Default for Shapelets {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " Ionospheric constants."]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct IonoConsts {
    #[doc = " The constant proportional to u."]
    pub alpha: f64,
    #[doc = " The constant proportional to u."]
    pub beta: f64,
    #[doc = " ... how do I describe this?"]
    pub gain: f64,
}
#[test]
fn bindgen_test_layout_IonoConsts() {
    const UNINIT: ::std::mem::MaybeUninit<IonoConsts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IonoConsts>(),
        24usize,
        concat!("Size of: ", stringify!(IonoConsts))
    );
    assert_eq!(
        ::std::mem::align_of::<IonoConsts>(),
        8usize,
        concat!("Alignment of ", stringify!(IonoConsts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IonoConsts),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beta) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IonoConsts),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IonoConsts),
            "::",
            stringify!(gain)
        )
    );
}
