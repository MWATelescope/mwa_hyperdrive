// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

//! Tests for reading and writing RTS calibration solutions.

use std::io::Cursor;
use std::{collections::BTreeMap, io::Read};

use approx::assert_abs_diff_eq;
use indoc::indoc;
use marlu::c64;
use serial_test::serial;

use super::*;
use crate::jones_test::TestJones;
use mwa_hyperdrive_common::{marlu, mwalib};

#[test]
fn test_read_di_jm() {
    let mut contents = Cursor::new(indoc! {"
    16.990089
    -0.131782, -0.933494, +0.019562, +0.135049, -0.008773, -0.134161, -0.063910, -0.921045
    +0.446814, -0.203973, -0.071393, +0.031377, -0.027429, +0.060070, -0.153991, +0.446221
    -0.629691, -0.403369, +0.088931, +0.060120, -0.065456, -0.061017, -0.541366, -0.433762
    "});

    let result = DiJm::read(&mut contents);
    assert!(result.is_ok());
    let di_jm = result.unwrap();

    assert_abs_diff_eq!(di_jm._alignment_flux_density, 16.990089);
    assert_abs_diff_eq!(
        TestJones::from(di_jm.post_alignment_matrix),
        TestJones::from([
            c64::new(-0.131782, -0.933494),
            c64::new(0.019562, 0.135049),
            c64::new(-0.008773, -0.134161),
            c64::new(-0.063910, -0.921045)
        ])
    );

    assert_eq!(di_jm.pre_alignment_matrices.len(), 2);
    assert_abs_diff_eq!(
        TestJones::from(di_jm.pre_alignment_matrices[0]),
        TestJones::from([
            c64::new(0.446814, -0.203973),
            c64::new(-0.071393, 0.031377),
            c64::new(-0.027429, 0.060070),
            c64::new(-0.153991, 0.446221)
        ])
    );
    assert_abs_diff_eq!(
        TestJones::from(di_jm.pre_alignment_matrices[1]),
        TestJones::from([
            c64::new(-0.629691, -0.403369),
            c64::new(0.088931, 0.060120),
            c64::new(-0.065456, -0.061017),
            c64::new(-0.541366, -0.433762)
        ])
    );
}

#[test]
fn test_read_bad_di_jm() {
    let mut contents = Cursor::new(indoc! {"
    16.990089asdf
    -0.131782, -0.933494, +0.019562, +0.135049, -0.008773, -0.134161, -0.063910, -0.921045
    +0.446814, -0.203973, -0.071393, +0.031377, -0.027429, +0.060070, -0.153991, +0.446221
    -0.629691, -0.403369, +0.088931, +0.060120, -0.065456, -0.061017, -0.541366, -0.433762
    "});
    let result = DiJm::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        matches!(err, ReadDiJmFileError::ParseFloat { .. }),
        "{}",
        err
    );
    match err {
        ReadDiJmFileError::ParseFloat { text, line_num } => {
            assert_eq!(text, "16.990089asdf");
            assert_eq!(line_num, 1);
        }
        _ => unreachable!(),
    }

    // No trailing ", " on line 2.
    let mut contents = Cursor::new(indoc! {"
    16.990089
    -0.131782, -0.933494, +0.019562, +0.135049, -0.008773, -0.134161, -0.063910
    +0.446814, -0.203973, -0.071393, +0.031377, -0.027429, +0.060070, -0.153991, +0.446221
    -0.629691, -0.403369, +0.088931, +0.060120, -0.065456, -0.061017, -0.541366, -0.433762
    "});
    let result = DiJm::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        matches!(err, ReadDiJmFileError::BadFloatCount { .. }),
        "{}",
        err
    );
    match err {
        ReadDiJmFileError::BadFloatCount { count, line_num } => {
            assert_eq!(count, 7);
            assert_eq!(line_num, 2);
        }
        _ => unreachable!(),
    }

    // Trailing ", " on line 3.
    let mut contents = Cursor::new(indoc! {"
    16.990089
    -0.131782, -0.933494, +0.019562, +0.135049, -0.008773, -0.134161, -0.063910, -0.921045
    +0.446814, -0.203973, -0.071393, +0.031377, -0.027429, +0.060070, -0.153991, 
    -0.629691, -0.403369, +0.088931, +0.060120, -0.065456, -0.061017, -0.541366, -0.433762
    "});
    let result = DiJm::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        matches!(err, ReadDiJmFileError::ParseFloat { .. }),
        "{}",
        err
    );
    match err {
        ReadDiJmFileError::ParseFloat { text, line_num } => {
            assert_eq!(text, "");
            assert_eq!(line_num, 3);
        }
        _ => unreachable!(),
    }

    // No pre-alignment matrices.
    let mut contents = Cursor::new(indoc! {"
    16.990089
    -0.131782, -0.933494, +0.019562, +0.135049, -0.008773, -0.134161, -0.063910, -0.921045
    "});
    let result = DiJm::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        matches!(err, ReadDiJmFileError::NoPreAlignmentMatrices),
        "{}",
        err
    );

    // No post-alignment matrix. Right now this returns the "no
    // pre-alignment matrices" error; probably not worth handling this case
    // explicitly.
    let mut contents = Cursor::new(indoc! {"
    16.990089
    "});
    let result = DiJm::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        matches!(err, ReadDiJmFileError::NoPreAlignmentMatrices),
        "{}",
        err
    );
}

#[test]
fn test_read_bp_cal() {
    let mut contents = Cursor::new(indoc! {"
    0.080000, 0.120000, 0.160000, 0.200000, 0.240000, 0.280000, 0.320000, 0.360000, 0.400000, 0.440000, 0.480000, 0.520000, 0.560000, 0.600000, 0.680000, 0.720000, 0.760000, 0.800000, 0.840000, 0.880000, 0.920000, 0.960000, 1.000000, 1.040000, 1.080000, 1.120000, 1.160000
    1, +0.933187,+0.124900, +0.925032,+0.051076, +0.983015,+0.048851, +0.955646,+0.097522, +0.935120,+0.061026, +0.963394,+0.051962, +0.945503,+0.082745, +0.976258,+0.056123, +0.942418,+0.051028, +0.979208,+0.108845, +1.044598,-0.031548, +0.988058,+0.061238, +1.017325,+0.075034, +1.027989,+0.038516, +0.941412,+0.022692, +1.010886,-0.002624, +1.050987,-0.038793, +0.989869,-0.021682, +1.059668,-0.062062, +1.006765,-0.012929, +1.018207,-0.020751, +1.027608,-0.066085, +0.978486,+0.017073, +0.983055,-0.061753, +1.039269,-0.060553, +0.996899,-0.032193, +0.958020,-0.012022
    1, +0.935630,+0.074762, +0.939763,+0.078459, +0.944358,+0.080163, +0.949325,+0.080063, +0.954583,+0.078350, +0.960059,+0.075213, +0.965683,+0.070840, +0.971389,+0.065411, +0.977109,+0.059103, +0.982775,+0.052089, +0.988317,+0.044533, +0.993660,+0.036593, +0.998725,+0.028422, +1.003430,+0.020165, +1.011402,+0.003949, +1.014479,-0.003744, +1.016817,-0.010991, +1.018312,-0.017666, +1.018855,-0.023646, +1.018336,-0.028807, +1.016647,-0.033019, +1.013676,-0.036152, +1.009314,-0.038063, +1.003456,-0.038600, +0.996001,-0.037597, +0.986856,-0.034867, +0.975938,-0.030198
    1, +0.028094,+1.938599, +0.095979,+1.927272, +0.063084,+1.497334, +0.038923,+2.038567, +0.042106,-0.197279, +0.033726,+0.694516, +0.021041,+0.806852, +0.005429,+0.724472, +0.024595,+1.080244, +0.064542,-1.462700, +0.007677,+3.062105, +0.042752,+2.964023, +0.024250,+1.750612, +0.025183,+0.572852, +0.093246,-1.437371, +0.072960,+0.388607, +0.036465,-2.293088, +0.051817,-0.380447, +0.061873,+0.746348, +0.057017,-3.012728, +0.017769,-1.969344, +0.034354,+1.581927, +0.014601,-2.095187, +0.014736,-1.062069, +0.022657,+2.769590, +0.039287,+2.177993, +0.023057,-1.619737
    1, +0.066164,+1.748954, +0.052874,+1.719049, +0.041183,+1.675159, +0.031050,+1.608016, +0.022479,+1.499359, +0.015579,+1.311149, +0.010716,+0.971955, +0.008587,+0.448632, +0.009110,-0.044585, +0.010768,-0.343075, +0.012416,-0.504872, +0.013631,-0.594778, +0.014297,-0.645468, +0.014406,-0.672629, +0.013112,-0.684532, +0.011819,-0.675930, +0.010177,-0.659721, +0.008246,-0.636544, +0.006085,-0.606553, +0.003749,-0.569295, +0.001286,-0.520642, +0.001264,+2.653342, +0.003872,+2.716903, +0.006523,+2.783537, +0.009220,+2.857618, +0.011984,+2.939568, +0.014863,+3.029070
    1, +0.047613,-0.953055, +0.049172,-0.356952, +0.061236,+0.828989, +0.033252,-1.788378, +0.045302,+1.363646, +0.073906,+2.367618, +0.042014,+1.276348, +0.032000,-0.278429, +0.043980,-2.598768, +0.026952,-1.163291, +0.074998,-2.961170, +0.036996,-3.010257, +0.028327,-0.023353, +0.057924,-1.023675, +0.053567,+1.775871, +0.050446,+1.753041, +0.037429,-0.475048, +0.062293,-0.523358, +0.045817,-0.723847, +0.019351,-1.901438, +0.021662,-1.067652, +0.082240,+3.042886, +0.065688,-2.205149, +0.033271,-1.403604, +0.029344,+0.832091, +0.028224,+1.130839, +0.069914,+1.782797
    1, +0.043069,-0.456759, +0.028309,-0.292615, +0.017425,+0.014971, +0.011482,+0.601228, +0.011186,+1.289382, +0.013345,+1.706096, +0.015128,+1.934912, +0.015756,+2.088093, +0.015177,+2.217934, +0.013567,+2.356820, +0.011234,+2.541970, +0.008703,+2.841048, +0.007012,-2.926967, +0.007569,-2.296864, +0.013472,-1.632345, +0.016695,-1.494674, +0.019369,-1.405565, +0.021161,-1.342770, +0.021782,-1.295255, +0.020963,-1.256669, +0.018444,-1.222178, +0.013970,-1.184827, +0.007298,-1.114349, +0.002049,+1.552699, +0.013793,+1.896750, +0.028622,+1.938191, +0.046677,+1.959530
    1, +0.965535,+0.056896, +0.961423,+0.031604, +0.918322,+0.087380, +0.957804,+0.021935, +0.991440,+0.129885, +0.962293,+0.093485, +0.945119,+0.015435, +0.995737,+0.041320, +0.999693,+0.108345, +0.910748,+0.090467, +1.012052,+0.110794, +0.997660,+0.006490, +1.038891,+0.086169, +1.048333,-0.014283, +1.077019,+0.013320, +0.953071,-0.032596, +0.969127,+0.024367, +1.013380,-0.081947, +0.947049,-0.001318, +0.958080,-0.009211, +0.966176,-0.039651, +1.009018,-0.060612, +0.959023,-0.054578, +0.996081,-0.024407, +1.047672,-0.056903, +0.972460,-0.042379, +1.071203,-0.062889
    1, +0.930994,+0.042934, +0.944591,+0.055716, +0.956214,+0.065144, +0.965938,+0.071606, +0.973868,+0.075439, +0.980136,+0.076930, +0.984891,+0.076338, +0.988296,+0.073893, +0.990522,+0.069810, +0.991747,+0.064288, +0.992150,+0.057523, +0.991912,+0.049707, +0.991207,+0.041031, +0.990211,+0.031692, +0.987998,+0.011834, +0.987094,+0.001737, +0.986518,-0.008178, +0.986403,-0.017685, +0.986877,-0.026552, +0.988060,-0.034543, +0.990064,-0.041426, +0.993002,-0.046970, +0.996985,-0.050950, +1.002125,-0.053153, +1.008544,-0.053382, +1.016374,-0.051455, +1.025759,-0.047216
    "});

    let result = BpCal::read(&mut contents);
    assert!(result.is_ok(), "{}", result.unwrap_err());
    let bp_cal = result.unwrap();

    assert!(bp_cal.fine_channel_resolution.is_some());
    assert_abs_diff_eq!(bp_cal.fine_channel_resolution.unwrap(), 40e3);
    assert_abs_diff_eq!(
        array![
            2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
            27, 28, 29
        ],
        Array1::from(bp_cal.unflagged_fine_channel_indices.into_vec())
    );

    assert_eq!(bp_cal.data.dim().0, 1); // One tile
    assert_eq!(bp_cal.data.dim().1, 2); // "lsq" and "fit" data
    assert_eq!(bp_cal.data.dim().2, 27); // 27 unflagged channels

    assert_abs_diff_eq!(
        TestJones::from(bp_cal.data[(0, 0, 0)]),
        TestJones::from([
            0.933187 * cexp(0.124900),
            0.028094 * cexp(1.938599),
            0.047613 * cexp(-0.953055),
            0.965535 * cexp(0.056896)
        ])
    );
    assert_abs_diff_eq!(
        TestJones::from(bp_cal.data[(0, 1, 0)]),
        TestJones::from([
            0.935630 * cexp(0.074762),
            0.066164 * cexp(1.748954),
            0.043069 * cexp(-0.456759),
            0.930994 * cexp(0.042934)
        ])
    );

    assert_abs_diff_eq!(
        TestJones::from(bp_cal.data[(0, 0, 1)]),
        TestJones::from([
            0.925032 * cexp(0.051076),
            0.095979 * cexp(1.927272),
            0.049172 * cexp(-0.356952),
            0.961423 * cexp(0.031604)
        ])
    );
    assert_abs_diff_eq!(
        TestJones::from(bp_cal.data[(0, 1, 1)]),
        TestJones::from([
            0.939763 * cexp(0.078459),
            0.052874 * cexp(1.719049),
            0.028309 * cexp(-0.292615),
            0.944591 * cexp(0.055716)
        ])
    );

    assert_abs_diff_eq!(
        TestJones::from(bp_cal.data[(0, 0, 26)]),
        TestJones::from([
            0.958020 * cexp(-0.012022),
            0.023057 * cexp(-1.619737),
            0.069914 * cexp(1.782797),
            1.071203 * cexp(-0.062889)
        ])
    );
    assert_abs_diff_eq!(
        TestJones::from(bp_cal.data[(0, 1, 26)]),
        TestJones::from([
            0.975938 * cexp(-0.030198),
            0.014863 * cexp(3.029070),
            0.046677 * cexp(1.959530),
            1.025759 * cexp(-0.047216)
        ])
    );
}

#[test]
fn test_read_bad_bp_cal() {
    let mut contents = Cursor::new(indoc! {"
    0.080000, 0.120000, 0.160000, 0.200000, 0.240000, 0.280000, 0.320000, 0.360000, 0.400000, 0.440000, 0.480000, 0.520000, 0.560000, 0.600000, 0.680000, 0.720000, 0.760000, 0.800000, 0.840000, 0.880000, 0.920000, 0.960000, 1.000000, 1.040000, 1.080000, 1.120000, asdf
    "});

    let result = BpCal::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        // Even though there's a bad float, the number of lines is checked
        // first.
        matches!(err, ReadBpCalFileError::NoTiles { .. }),
        "{}",
        err
    );

    let mut contents = Cursor::new(indoc! {"
    0.080000, 0.120000, 0.160000, 0.200000, 0.240000, 0.280000, 0.320000, 0.360000, 0.400000, 0.440000, 0.480000, 0.520000, 0.560000, 0.600000, 0.680000, 0.720000, 0.760000, 0.800000, 0.840000, 0.880000, 0.920000, 0.960000, 1.000000, 1.040000, 1.080000, 1.120000
    "});

    let result = BpCal::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(matches!(err, ReadBpCalFileError::NoTiles { .. }), "{}", err);

    let mut contents = Cursor::new(indoc! {"
    0.080000, 0.120000, 0.160000, 0.200000, 0.240000, 0.280000, 0.320000, 0.360000, 0.400000, 0.440000, 0.480000, 0.520000, 0.560000, 0.600000, 0.680000, 0.720000, 0.760000, 0.800000, 0.840000, 0.880000, 0.920000, 0.960000, 1.000000, 1.040000, 1.080000, 1.120000,
    1, +0.933187,+0.124900, +0.925032,+0.051076, +0.983015,+0.048851, +0.955646,+0.097522, +0.935120,+0.061026, +0.963394,+0.051962, +0.945503,+0.082745, +0.976258,+0.056123, +0.942418,+0.051028, +0.979208,+0.108845, +1.044598,-0.031548, +0.988058,+0.061238, +1.017325,+0.075034, +1.027989,+0.038516, +0.941412,+0.022692, +1.010886,-0.002624, +1.050987,-0.038793, +0.989869,-0.021682, +1.059668,-0.062062, +1.006765,-0.012929, +1.018207,-0.020751, +1.027608,-0.066085, +0.978486,+0.017073, +0.983055,-0.061753, +1.039269,-0.060553, +0.996899,-0.032193, +0.958020,-0.012022
    "});

    let result = BpCal::read(&mut contents);
    assert!(result.is_err());
    let err = result.unwrap_err();
    assert!(
        matches!(err, ReadBpCalFileError::UnexpectedLineCount { .. }),
        "{}",
        err
    );
    match err {
        ReadBpCalFileError::UnexpectedLineCount { got } => {
            assert_eq!(got, 2);
        }
        _ => unreachable!(),
    }
}

#[test]
#[serial]
fn test_written_rts_solutions_are_valid() {
    let mut di_contents = Cursor::new(indoc! {"
    16.958372
    +0.823644, +0.005932, -0.049899, -0.000282, +0.047816, -0.000096, +0.800999, -0.003228
    -0.927225, +2.048110, +0.118158, -0.124614, -0.002050, -0.107369, +0.069164, -1.925750
    +1.515224, -2.616804, -0.084692, +0.178834, +0.114647, -0.128457, +1.450237, -2.372192
    +2.294482, +1.350020, -0.176975, -0.104273, +0.103594, -0.093047, +1.767455, -1.394932
    +1.094219, -2.432227, -0.077624, +0.179495, +0.133953, -0.001403, +2.440525, -0.178063
    -1.991444, -0.170001, +0.116659, +0.047990, -0.061392, +0.064014, -1.348291, +1.471237
    +2.375574, -0.082658, -0.193667, +0.005215, +0.117191, +0.028058, +1.914104, -0.055255
    +2.480573, -1.374471, -0.198564, +0.096357, +0.066143, -0.155446, +1.264296, -2.665209
    +1.080585, -2.307338, -0.069760, +0.171914, +0.069504, -0.102823, +1.153953, -2.164353
    -0.113685, -1.799150, -0.009775, +0.147421, +0.009946, -0.100247, -0.377826, -1.652008
    -1.818856, -0.473323, +0.136360, +0.020639, +0.053919, -0.049071, +0.794251, -1.356991
    +2.203168, +0.114569, -0.165767, -0.034733, +0.029636, +0.122803, +1.129838, +1.666369
    +1.308462, -0.790178, -0.109354, +0.051068, -0.044161, +0.060565, -0.902716, +1.293109
    +2.162486, +0.238410, -0.153629, -0.057737, +0.104039, +0.070653, +1.623731, +1.272766
    +2.091961, -0.242373, -0.138496, +0.032572, -0.049909, +0.091011, -0.590985, +1.896703
    +2.020151, +0.654269, -0.156926, -0.039815, -0.004856, +0.100298, +0.232707, +1.829042
    +2.150203, +0.184775, -0.162888, -0.012385, +0.022262, +0.095455, +0.441908, +1.742367
    -1.149819, -1.707788, +0.111659, +0.148108, -0.076761, +0.066429, -1.251577, +1.174275
    -1.728373, -1.249246, +0.119617, +0.082967, -0.076102, +0.026896, -1.988363, +0.261115
    +2.435285, +0.160986, -0.173052, -0.021474, +0.060141, +0.016648, +2.204193, -0.174139
    +0.644669, +2.687777, -0.037706, -0.222187, +0.073667, +0.095924, +1.496973, +2.131951
    -2.479944, +0.377187, +0.213353, -0.012489, -0.139533, +0.004016, -2.603708, +0.004988
    +2.406240, +0.247442, -0.184771, -0.020683, +0.137831, -0.083252, +1.912743, -1.511084
    +2.571579, +0.105961, -0.225438, -0.023424, +0.116442, -0.045803, +2.088312, -1.232837
    -0.880300, -1.971270, +0.027783, +0.157189, -0.090853, +0.040736, -1.603076, +1.160477
    +1.379821, +2.244707, -0.093859, -0.174292, +0.062235, -0.090187, +1.431106, -1.766289
    -1.333189, -2.023536, +0.080793, +0.143557, +0.020881, -0.104457, -0.343976, -2.066756
    -1.779923, -1.099791, +0.125020, +0.086215, +0.010356, +0.148713, +0.476143, +2.341094
    +2.627704, -0.446002, -0.188899, +0.000573, -0.046543, -0.118293, -0.857607, -2.188397
    +1.898425, -2.169267, -0.066443, +0.169102, +0.155988, -0.075168, +2.503536, -1.495098
    +1.784765, +1.962957, -0.100275, -0.164387, +0.019430, +0.131311, +0.542971, +2.050346
    +1.755858, +1.698990, -0.161604, -0.129974, -0.019249, -0.073653, -0.479183, -2.311244
    +1.831673, -1.729721, -0.126989, +0.122742, +0.115396, +0.065318, +1.769587, +1.104326
    +2.746552, +0.390777, -0.176197, +0.011635, +0.141767, +0.106570, +2.663425, +1.099966
    +2.716872, +0.872128, -0.201830, -0.101542, +0.138065, +0.018787, +2.612216, -0.023517
    +1.116727, +2.587127, -0.061211, -0.240735, +0.052938, +0.150821, +1.038132, +2.218688
    +2.062913, +1.615741, -0.159142, -0.131043, +0.013356, +0.135578, +0.596446, +2.278594
    +2.210551, +1.764528, -0.151578, -0.142934, +0.129534, +0.069138, +2.365278, +1.007577
    -0.842612, -2.635205, +0.126553, +0.237214, +0.038982, -0.150986, +0.323485, -2.861160
    -0.114253, +2.960076, +0.008386, -0.237093, +0.183462, +0.083930, +2.759722, +1.202926
    +0.837607, -3.143835, -0.074910, +0.242557, +0.103304, -0.076889, +2.523820, -1.652336
    -0.862763, +2.514799, +0.070644, -0.158754, +0.097347, +0.072298, +2.331502, +1.590510
    +2.255769, -1.593388, -0.149402, +0.087198, +0.136508, -0.076661, +2.298851, -1.128752
    +1.981357, +1.634672, -0.111447, -0.158650, +0.110094, +0.048125, +1.969197, +1.569124
    +0.521847, +2.487755, -0.056802, -0.226911, -0.106164, +0.128725, -1.090764, +2.359627
    +2.501211, +0.265172, -0.175018, -0.068498, -0.054604, +0.069000, -1.735515, +1.226298
    +1.417547, -1.735833, -0.119698, +0.120009, +0.131805, -0.068066, +1.773757, -0.839638
    -2.157719, +0.891577, +0.181385, -0.076797, +0.075368, +0.126934, +1.136073, +1.702300
    +2.113069, -1.445886, -0.121455, +0.067864, +0.081436, -0.109363, +1.221563, -1.711795
    +1.540638, +1.976707, -0.109417, -0.137369, -0.001230, -0.185237, -0.440108, -2.486901
    +1.214669, +2.850365, -0.069126, -0.231063, +0.124930, +0.064545, +2.113517, +1.605809
    +2.647800, +1.066868, -0.158532, -0.092336, +0.126954, +0.040122, +2.179631, +1.046665
    +2.049671, -1.584984, -0.157876, +0.112149, +0.025765, +0.129002, +0.555745, +2.361280
    +0.432476, -2.558063, -0.040042, +0.160403, +0.092492, +0.108238, +1.302343, +1.975577
    -1.973392, +1.799265, +0.153142, -0.149417, +0.015741, +0.109762, +0.698546, +2.117236
    -0.014076, -2.530143, +0.024086, +0.186257, +0.133096, +0.084424, +2.336004, +0.746049
    +2.239114, +1.238032, -0.167365, -0.087482, -0.107698, +0.012714, -2.394986, +0.607895
    +2.081657, -1.554001, -0.095908, +0.092758, +0.096560, -0.122039, +0.481843, -2.534056
    +0.675041, +2.223020, -0.029785, -0.164647, +0.074708, -0.119469, +1.517312, -1.880764
    +2.557666, -1.208985, -0.214430, +0.125006, +0.172409, +0.044720, +2.869125, -0.220101
    +2.233088, -1.519971, -0.203993, +0.105003, +0.120745, +0.035786, +2.385328, +0.096948
    +0.800644, +2.533712, -0.028977, -0.208023, +0.116125, +0.016793, +2.534958, +0.625076
    +2.311540, +0.872768, -0.146914, -0.062116, +0.073696, -0.120841, +1.110530, -2.028632
    +2.257901, +1.027338, -0.182199, -0.091265, +0.086615, +0.039403, +2.091920, +0.715675
    +1.804859, -2.049295, -0.126213, +0.105793, +0.122601, -0.042873, +2.237552, -0.835403
    -1.874431, -2.018800, +0.113583, +0.090269, -0.027383, +0.076714, +0.813320, +2.400908
    +1.888269, +1.973905, -0.136626, -0.166310, +0.015375, -0.143748, +0.056381, -2.369185
    -0.397672, -2.112882, +0.016225, +0.170004, -0.128967, +0.072654, -2.014091, +0.643527
    -0.710769, -2.017284, +0.024292, +0.215643, -0.104561, +0.084680, -1.553756, +1.017579
    -0.531757, -2.123984, +0.027493, +0.156107, -0.099017, +0.039159, -1.764040, +0.762313
    +1.060163, +2.582474, -0.078039, -0.220238, +0.108423, -0.068939, +1.668492, -1.725811
    +0.998451, +1.796737, -0.052176, -0.128225, +0.071309, -0.028756, +1.198767, -1.595748
    -1.407798, +1.747194, +0.115729, -0.111073, +0.021933, -0.095299, +0.256502, -1.979202
    -1.699630, +1.918085, +0.140083, -0.146445, +0.045270, -0.152186, +0.502685, -2.317209
    +1.557829, +1.598441, -0.110429, -0.143011, +0.102847, -0.071622, +1.312487, -1.465806
    +2.755879, +1.220908, -0.246265, -0.121668, +0.165820, +0.034456, +2.509957, +0.534931
    -0.151166, -2.046343, -0.012521, +0.145530, +0.077000, +0.056279, +1.590913, +0.743705
    -0.074601, +2.319602, +0.011567, -0.176322, -0.032723, -0.131492, -0.717502, -1.941874
    -1.205505, -1.927345, +0.097114, +0.175956, -0.001495, -0.084387, -0.147056, -2.210505
    -2.328506, +0.477644, +0.175146, -0.023026, -0.125565, +0.080059, -1.970452, +0.806489
    -1.935556, +1.052704, +0.127261, -0.060913, -0.084704, -0.075077, -1.480577, -1.121642
    -1.168921, -1.998864, +0.114168, +0.165713, -0.103744, +0.047058, -1.904955, +0.918608
    -1.753877, -1.989686, +0.151921, +0.145013, -0.215490, +0.049952, -2.351801, +0.728091
    -2.289567, +0.527319, +0.522267, +0.013660, +0.174001, -0.332170, +1.230540, -1.583792
    +0.143794, +2.142097, -0.032919, -0.161433, +0.086779, -0.030007, +1.134175, -1.326878
    +2.092377, -1.667566, -0.201183, +0.083849, +0.087845, +0.012226, +2.423039, -0.004770
    +2.378230, -1.028953, -0.204143, +0.080887, +0.110496, +0.091218, +2.064813, +1.058656
    -0.440200, +2.679481, +0.036639, -0.209200, -0.138909, +0.021533, -2.504288, +0.682713
    +0.834581, -1.980609, -0.058797, +0.159250, +0.014287, +0.129402, +0.641016, +1.936806
    +1.128435, -2.329704, -0.106935, +0.199836, +0.015305, +0.136113, +0.626222, +2.425420
    +1.452237, +1.503169, -0.095368, -0.086926, +0.013877, +0.124588, +0.776580, +1.860915
    +1.024854, +1.596829, -0.088953, -0.129884, +0.077059, -0.013288, +1.944519, -0.364537
    -0.084178, -2.064861, -0.000740, +0.141587, -0.146543, -0.050588, -1.897754, -0.771078
    -2.196900, -0.603235, +0.196056, +0.045082, +0.034593, +0.103919, +0.358140, +1.752453
    -0.367387, +2.661319, +0.036202, -0.237486, -0.109011, -0.118460, -2.241976, -1.092571
    +1.380243, -2.343556, -0.090154, +0.178214, +0.066079, +0.151832, +1.549569, +1.923155
    -1.160127, +2.291487, +0.089068, -0.162601, -0.083099, -0.114736, -1.075034, -2.298374
    +2.293722, +0.654082, -0.190741, -0.031695, +0.150230, -0.107363, +1.743463, -1.869931
    +2.520121, -0.016670, -0.159348, -0.006472, -0.191421, -0.011479, -2.639375, +0.035371
    -0.519533, +2.854908, +0.013037, -0.111715, -0.100588, +0.017592, -2.308479, +1.335411
    +0.623504, +2.740127, -0.004906, -0.172061, +0.132409, -0.015570, +2.164601, -0.223849
    +2.877970, -0.814980, -0.165184, +0.010693, +0.043299, +0.115349, +0.450310, +2.561141
    +1.780853, -2.094666, -0.101005, +0.098366, +0.026726, -0.171443, +0.051259, -2.681844
    +3.037769, -0.836873, -0.216713, +0.087200, +0.129218, -0.083238, +1.814175, -1.890720
    +1.331463, -2.600157, -0.070227, +0.117507, -0.037119, -0.165804, -0.124502, -2.579005
    +2.311518, -1.649127, -0.136875, +0.134972, +0.108165, -0.141397, +0.940592, -2.384488
    +0.256806, -3.155109, -0.055065, +0.230562, +0.173398, +0.031190, +2.694652, +0.193035
    +1.204819, -2.769958, -0.060264, +0.188867, +0.124762, -0.178208, +1.676278, -2.188774
    -1.379050, -2.648857, +0.081458, +0.192638, -0.056741, -0.165186, -0.663406, -2.572664
    +1.630977, +2.200745, -0.164624, -0.129583, +0.226444, +0.030442, +2.433199, +0.111255
    +3.107159, -0.435430, -0.214386, +0.053721, +0.173726, +0.065676, +2.998879, +0.242533
    -0.394122, +2.883333, +0.055024, -0.209293, +0.028563, +0.127299, +1.077362, +2.502014
    +2.092425, +2.238446, -0.130532, -0.200586, +0.153232, +0.046521, +2.693523, +1.095747
    -1.832882, +2.101808, +0.153231, -0.149394, +0.187141, +0.036845, +2.644230, +0.318495
    +1.509281, -2.679584, -0.089993, +0.189702, +0.107554, -0.084339, +1.576248, -2.113808
    +1.171982, -2.599001, -0.081483, +0.165515, -0.044116, +0.164706, +0.010036, +2.554560
    +1.916260, +2.031458, -0.098400, -0.108594, +0.169760, +0.031621, +2.390355, +1.141175
    +1.612796, +2.314657, -0.139973, -0.156963, +0.157229, +0.079407, +2.257812, +0.463333
    -1.948355, -2.007679, +0.173240, +0.152138, +0.119209, -0.093616, +1.713492, -1.828011
    +2.488950, +0.481762, -0.221544, -0.055015, +0.132463, -0.005177, +2.266015, -0.908304
    -2.553986, +1.120751, +0.183070, -0.073334, -0.005044, +0.134432, +0.334537, +2.501795
    +0.635387, -2.635934, -0.038598, +0.191059, +0.182657, +0.062284, +2.575306, +0.588716
    -2.126476, +1.942943, +0.149687, -0.117921, +0.078156, +0.105410, +1.294012, +2.185365
    +1.605335, -2.391778, -0.118414, +0.105163, +0.137388, -0.017245, +2.500621, -0.678619
    +2.514629, +0.819592, -0.160229, -0.102703, +0.079519, +0.060712, +1.611939, +2.049210
    +0.595064, +2.863859, -0.021551, -0.208305, -0.088079, -0.122234, -1.563901, -1.695813
    +1.001100, -2.427083, -0.041539, +0.173918, +0.094199, +0.110161, +1.561822, +1.638554
    +2.589348, -0.393671, -0.167755, +0.044225, +0.099915, +0.066939, +1.999004, +0.741283
    +0.147354, +2.225271, +0.000896, -0.143705, +0.079524, -0.014061, +2.036424, +0.388246
    "});

    let mut bp_contents = Cursor::new(indoc! {"
    0.080000, 0.120000, 0.160000, 0.200000, 0.240000, 0.280000, 0.320000, 0.360000, 0.400000, 0.440000, 0.480000, 0.520000, 0.560000, 0.600000, 0.680000, 0.720000, 0.760000, 0.800000, 0.840000, 0.880000, 0.920000, 0.960000, 1.000000, 1.040000, 1.080000, 1.120000, 1.160000
    1, +1.007839,+0.048330, +0.965450,+0.030589, +1.004804,+0.024588, +1.021328,+0.037510, +1.011441,+0.003489, +1.055452,+0.031463, +0.989493,+0.055596, +0.967670,+0.039352, +1.029236,+0.028281, +0.995169,+0.086018, +1.018038,+0.030354, +0.996802,+0.020434, +1.036056,+0.016167, +1.002645,+0.030603, +1.031664,-0.005085, +0.997061,+0.042948, +0.995575,-0.028720, +1.010324,-0.021677, +1.003458,+0.029287, +1.024675,-0.033863, +1.007881,-0.002551, +0.977231,-0.039077, +1.012110,+0.028684, +0.961047,+0.043908, +1.005554,+0.007189, +1.001124,+0.037846, +1.004787,-0.002997
    1, +0.994565,+0.026582, +0.998638,+0.032281, +1.002116,+0.036401, +1.005020,+0.039096, +1.007374,+0.040515, +1.009213,+0.040800, +1.010575,+0.040086, +1.011498,+0.038509, +1.012026,+0.036199, +1.012201,+0.033284, +1.012066,+0.029892, +1.011661,+0.026151, +1.011028,+0.022188, +1.010203,+0.018132, +1.008124,+0.010257, +1.006935,+0.006699, +1.005688,+0.003570, +1.004411,+0.001003, +1.003134,-0.000866, +1.001884,-0.001901, +1.000693,-0.001968, +0.999594,-0.000927, +0.998621,+0.001356, +0.997820,+0.005018, +0.997237,+0.010195, +0.996934,+0.017017, +0.996978,+0.025615
    1, +0.076384,+3.018587, +0.019462,+2.136659, +0.037057,+1.016465, +0.021773,+2.677835, +0.052057,+0.515947, +0.043333,-0.268009, +0.041648,+2.498155, +0.056920,+0.143527, +0.019942,-0.954625, +0.049443,+0.197106, +0.015212,-0.370090, +0.047046,-2.767786, +0.019788,+0.649060, +0.040730,-1.691891, +0.053595,-0.891351, +0.055628,-0.711096, +0.056320,-0.661657, +0.052994,-0.128911, +0.046056,-0.936293, +0.025730,+0.110777, +0.085309,+2.467109, +0.026462,-0.954307, +0.020748,+0.075569, +0.011620,-0.279191, +0.068068,-0.891082, +0.011839,+3.048717, +0.038486,-1.790095
    1, +0.042157,+2.435386, +0.030354,+2.342827, +0.020323,+2.179423, +0.012557,+1.839636, +0.008851,+1.133122, +0.010655,+0.423570, +0.014671,+0.079572, +0.018631,-0.088720, +0.021972,-0.187652, +0.024580,-0.255243, +0.026462,-0.307116, +0.027663,-0.350831, +0.028250,-0.390629, +0.028294,-0.429242, +0.027072,-0.510675, +0.025972,-0.556760, +0.024662,-0.608463, +0.023234,-0.667219, +0.021780,-0.734213, +0.020392,-0.810019, +0.019162,-0.894020, +0.018166,-0.983720, +0.017466,-1.074273, +0.017092,-1.158725, +0.017053,-1.229189, +0.017337,-1.278553, +0.017937,-1.301911
    1, +0.043370,+1.554036, +0.035379,-0.602720, +0.036242,-2.402330, +0.034864,-2.837369, +0.063387,-1.305590, +0.059614,+2.685293, +0.019892,+2.849756, +0.012663,+1.031331, +0.033575,+2.010153, +0.025367,-1.761881, +0.013351,+0.417866, +0.002177,-1.244753, +0.034889,-2.084202, +0.032582,-1.352667, +0.019421,-1.812978, +0.050906,+1.518951, +0.005143,-1.511477, +0.060658,+1.867893, +0.041995,-1.720314, +0.001091,+0.565447, +0.007778,+0.527792, +0.035640,+1.393803, +0.032902,-2.940980, +0.012266,+1.721484, +0.010389,+1.588152, +0.005950,+2.718982, +0.035939,-0.745118
    1, +0.008783,+2.086030, +0.005899,+2.750501, +0.006705,-2.835863, +0.008877,-2.508980, +0.010815,-2.370804, +0.012152,-2.311478, +0.012848,-2.293039, +0.012952,-2.301868, +0.012545,-2.333977, +0.011728,-2.390697, +0.010620,-2.477799, +0.009365,-2.605888, +0.008145,-2.790035, +0.007190,-3.042927, +0.006898,+2.612567, +0.007535,+2.344201, +0.008383,+2.140879, +0.009184,+1.990795, +0.009740,+1.876921, +0.009894,+1.785082, +0.009522,+1.703567, +0.008516,+1.619409, +0.006793,+1.507886, +0.004353,+1.278752, +0.002135,+0.274840, +0.004960,-0.965026, +0.010513,-1.226203
    1, +1.040214,+0.007630, +0.999439,+0.035381, +0.999342,+0.034254, +1.025834,+0.031033, +1.027333,-0.051747, +1.002811,-0.010792, +0.978871,+0.061123, +1.000770,+0.031406, +0.965331,+0.032789, +0.965096,+0.040834, +0.995467,+0.083905, +0.959199,+0.043364, +0.937725,+0.031044, +0.966482,+0.009262, +1.029532,+0.038333, +0.997658,+0.016851, +1.024014,+0.033486, +1.005674,-0.000815, +0.957612,+0.057327, +0.997028,-0.007313, +0.983841,+0.013860, +1.025674,-0.026806, +0.997158,+0.023121, +0.948454,+0.000485, +1.036003,+0.004324, +0.986736,+0.016818, +0.984066,+0.006179
    1, +1.036337,+0.005442, +1.023635,+0.011700, +1.012843,+0.017160, +1.003822,+0.021819, +0.996436,+0.025687, +0.990551,+0.028784, +0.986037,+0.031141, +0.982763,+0.032794, +0.980604,+0.033790, +0.979434,+0.034177, +0.979129,+0.034012, +0.979565,+0.033352, +0.980620,+0.032258, +0.982172,+0.030790, +0.986276,+0.026979, +0.988584,+0.024756, +0.990899,+0.022400, +0.993098,+0.019968, +0.995056,+0.017513, +0.996649,+0.015091, +0.997753,+0.012752, +0.998242,+0.010546, +0.997991,+0.008524, +0.996872,+0.006735, +0.994761,+0.005229, +0.991530,+0.004057, +0.987054,+0.003272
    "});

    let result = DiJm::read(&mut di_contents);
    assert!(result.is_ok(), "{}", result.unwrap_err());
    let di_jm = result.unwrap();

    let result = BpCal::read(&mut bp_contents);
    assert!(result.is_ok(), "{}", result.unwrap_err());
    let bp_cal = result.unwrap();

    let args = crate::tests::reduced_obsids::get_reduced_1090008640(false);
    let metafits = &args.data.unwrap()[0];
    let context = mwalib::MetafitsContext::new(&metafits, None).unwrap();

    let mut receiver_channel_to_data: BTreeMap<u8, (u8, DiJm, BpCal)> = BTreeMap::new();
    let rec_chan = context
        .metafits_coarse_chans
        .iter()
        .find(|cc| cc.gpubox_number == 1)
        .unwrap()
        .rec_chan_number;
    receiver_channel_to_data.insert(rec_chan as u8, (24, di_jm, bp_cal));
    let result = super::super::read_no_files(receiver_channel_to_data, &context);
    assert!(result.is_ok());
    let sols = result.unwrap();

    let tmp_dir = tempfile::tempdir().expect("Couldn't make tmp dir");
    let fee_beam_file: Option<&str> = None;
    super::super::write(&sols, tmp_dir.path(), metafits, fee_beam_file, Some(6)).unwrap();

    let mut written_di_contents = String::new();
    let mut written_bp_contents = String::new();
    File::open(tmp_dir.path().join("DI_JonesMatrices_node001.dat"))
        .unwrap()
        .read_to_string(&mut written_di_contents)
        .unwrap();
    File::open(tmp_dir.path().join("BandpassCalibration_node001.dat"))
        .unwrap()
        .read_to_string(&mut written_bp_contents)
        .unwrap();

    assert_eq!(di_contents.into_inner(), written_di_contents);
    assert_eq!(bp_contents.into_inner(), written_bp_contents);
}
