/* automatically generated by rust-bindgen 0.56.0 */

#[doc = " A struct containing metadata on the observation."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Context_s {
    #[doc = " The observation's frequency resolution [Hz]"]
    pub fine_channel_width: f64,
    #[doc = " The base frequency of the observation [Hz]"]
    pub base_freq: f64,
    #[doc = " The LST at the start of the observation [radians]"]
    pub base_lst: f64,
}
#[test]
fn bindgen_test_layout_Context_s() {
    assert_eq!(
        ::std::mem::size_of::<Context_s>(),
        24usize,
        concat!("Size of: ", stringify!(Context_s))
    );
    assert_eq!(
        ::std::mem::align_of::<Context_s>(),
        8usize,
        concat!("Alignment of ", stringify!(Context_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Context_s>())).fine_channel_width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Context_s),
            "::",
            stringify!(fine_channel_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Context_s>())).base_freq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Context_s),
            "::",
            stringify!(base_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Context_s>())).base_lst as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Context_s),
            "::",
            stringify!(base_lst)
        )
    );
}
#[doc = " A struct containing all of the baselines for a given epoch. The (U,V,W)"]
#[doc = " coordinates must be dimensionless; this is expected to be done by dividing"]
#[doc = " (U,V,W) coordinates in metres by a wavelength."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UVW_s {
    #[doc = " The number of baselines present."]
    pub n_baselines: ::std::os::raw::c_uint,
    #[doc = " The number of frequency channels (num. freq. bands * num. fine channels)"]
    #[doc = " present."]
    pub n_channels: ::std::os::raw::c_uint,
    #[doc = " The number of elements (visibilities) in each array."]
    pub n_vis: ::std::os::raw::c_uint,
    #[doc = " u-coordinates [dimensionless]"]
    pub u: *const f32,
    #[doc = " v-coordinates [dimensionless]"]
    pub v: *const f32,
    #[doc = " w-coordinates [dimensionless]"]
    pub w: *const f32,
}
#[test]
fn bindgen_test_layout_UVW_s() {
    assert_eq!(
        ::std::mem::size_of::<UVW_s>(),
        40usize,
        concat!("Size of: ", stringify!(UVW_s))
    );
    assert_eq!(
        ::std::mem::align_of::<UVW_s>(),
        8usize,
        concat!("Alignment of ", stringify!(UVW_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UVW_s>())).n_baselines as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UVW_s),
            "::",
            stringify!(n_baselines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UVW_s>())).n_channels as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UVW_s),
            "::",
            stringify!(n_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UVW_s>())).n_vis as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UVW_s),
            "::",
            stringify!(n_vis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UVW_s>())).u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(UVW_s), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UVW_s>())).v as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(UVW_s), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UVW_s>())).w as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(UVW_s), "::", stringify!(w))
    );
}
#[doc = " A struct representing a source's components. Assumes that there is one"]
#[doc = " (l,m,n) per component, and `n_channels` Stokes I flux densities per"]
#[doc = " component."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Source_s {
    #[doc = " The number of point source components."]
    pub n_points: ::std::os::raw::c_uint,
    #[doc = " l-coordinates [dimensionless]"]
    pub point_l: *const f32,
    #[doc = " m-coordinates [dimensionless]"]
    pub point_m: *const f32,
    #[doc = " n-coordinates [dimensionless]"]
    pub point_n: *const f32,
    #[doc = " The number of frequency channels (num. freq. bands * num. fine channels)"]
    #[doc = " present."]
    pub n_channels: ::std::os::raw::c_uint,
    #[doc = " The point-source flux densities [Jy]. The length of this array should be"]
    #[doc = " `n_points` * `n_channels`."]
    pub point_fd: *const f32,
}
#[test]
fn bindgen_test_layout_Source_s() {
    assert_eq!(
        ::std::mem::size_of::<Source_s>(),
        48usize,
        concat!("Size of: ", stringify!(Source_s))
    );
    assert_eq!(
        ::std::mem::align_of::<Source_s>(),
        8usize,
        concat!("Alignment of ", stringify!(Source_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Source_s>())).n_points as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Source_s),
            "::",
            stringify!(n_points)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Source_s>())).point_l as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Source_s),
            "::",
            stringify!(point_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Source_s>())).point_m as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Source_s),
            "::",
            stringify!(point_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Source_s>())).point_n as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Source_s),
            "::",
            stringify!(point_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Source_s>())).n_channels as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Source_s),
            "::",
            stringify!(n_channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Source_s>())).point_fd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Source_s),
            "::",
            stringify!(point_fd)
        )
    );
}
#[doc = " A container struct for storing visibilities."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Visibilities_s {
    #[doc = " The number of visibilities."]
    pub n_visibilities: ::std::os::raw::c_uint,
    #[doc = " Real components of the visibilities."]
    pub real: *mut f32,
    #[doc = " Imaginary components of the visibilities."]
    pub imag: *mut f32,
}
#[test]
fn bindgen_test_layout_Visibilities_s() {
    assert_eq!(
        ::std::mem::size_of::<Visibilities_s>(),
        24usize,
        concat!("Size of: ", stringify!(Visibilities_s))
    );
    assert_eq!(
        ::std::mem::align_of::<Visibilities_s>(),
        8usize,
        concat!("Alignment of ", stringify!(Visibilities_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Visibilities_s>())).n_visibilities as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Visibilities_s),
            "::",
            stringify!(n_visibilities)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Visibilities_s>())).real as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Visibilities_s),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Visibilities_s>())).imag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Visibilities_s),
            "::",
            stringify!(imag)
        )
    );
}
extern "C" {
    pub fn vis_gen(uvw: *const UVW_s, src: *const Source_s, vis: *mut Visibilities_s);
}
